<!DOCTYPE html>
<html>
<head>
  <title>Smart To-Do List</title>
  <style>
    :root {
      --bg: #f0f4f8;
      --card: #fff;
      --text: #333;
      --accent: #0078D4;
      --completed: #d4edda;
    }

    body.dark {
      --bg: #1e1e1e;
      --card: #2c2c2c;
      --text: #f0f0f0;
      --accent: #00b7ff;
      --completed: #2e4e3f;
    }

    * {
      box-sizing: border-box;
    }

    body {
      font-family: 'Segoe UI', sans-serif;
      background: var(--bg);
      color: var(--text);
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      margin: 0;
      transition: background 0.3s ease;
    }

    .container {
      background: var(--card);
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
      width: 420px;
    }

    h1 {
      text-align: center;
      margin-bottom: 20px;
    }

    .input-section {
      display: flex;
      flex-direction: column;
      gap: 10px;
    }

    input[type="text"], input[type="date"], select {
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 6px;
      font-size: 16px;
    }

    button {
      padding: 10px;
      background-color: var(--accent);
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-size: 16px;
    }

    button:hover {
      opacity: 0.9;
    }

    ul {
      list-style: none;
      padding: 0;
      margin-top: 20px;
    }

    li {
      background: #e8f0fe;
      padding: 10px;
      margin-bottom: 10px;
      border-radius: 6px;
      display: flex;
      flex-direction: column;
      transition: background 0.3s ease;
    }

    li.completed {
      background: var(--completed);
    }

    .task-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
    }

    .task-content {
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .task-text.completed {
      text-decoration: line-through;
      color: #555;
    }

    .task-meta {
      font-size: 12px;
      color: #555;
      margin-top: 4px;
    }

    .controls {
      display: flex;
      justify-content: space-between;
      margin-top: 10px;
    }

    .progress {
      margin-top: 10px;
      font-size: 14px;
      text-align: center;
    }

    .top-bar {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 10px;
    }

    .search {
      flex: 1;
      margin-right: 10px;
    }

    input[type="checkbox"] {
      transform: scale(1.2);
      cursor: pointer;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="top-bar">
      <input type="text" id="searchInput" class="search" placeholder="Search tasks..." oninput="filterTasks()" />
      <button onclick="toggleDarkMode()">üåô</button>
    </div>
    <h1>üìù Smart To-Do List</h1>
    <div class="input-section">
      <input type="text" id="taskInput" placeholder="Add a new task..." />
      <input type="date" id="dueDate" />
      <select id="category">
        <option value="General">General</option>
        <option value="Work">Work</option>
        <option value="Personal">Personal</option>
        <option value="Urgent">Urgent</option>
      </select>
      <button onclick="addTask()">Add Task</button>
    </div>
    <ul id="taskList"></ul>
    <div class="progress" id="progressBar"></div>
  </div>

  <script>
    let tasks = JSON.parse(localStorage.getItem("tasks")) || [];

    function saveTasks() {
      localStorage.setItem("tasks", JSON.stringify(tasks));
    }

    function addTask() {
      const text = document.getElementById("taskInput").value.trim();
      const due = document.getElementById("dueDate").value;
      const category = document.getElementById("category").value;

      if (!text) return;

      const now = new Date();
      const time = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
      const date = now.toLocaleDateString();

      const task = {
        text,
        date,
        time,
        due,
        category,
        completed: false
      };

      tasks.push(task);
      saveTasks();
      renderTasks();
      document.getElementById("taskInput").value = "";
      document.getElementById("dueDate").value = "";
    }

    function renderTasks() {
      const list = document.getElementById("taskList");
      list.innerHTML = "";

      const search = document.getElementById("searchInput").value.toLowerCase();

      let completedCount = 0;

      tasks.forEach((task, index) => {
        if (!task.text.toLowerCase().includes(search)) return;

        const li = document.createElement("li");
        if (task.completed) {
          li.classList.add("completed");
          completedCount++;
        }

        li.innerHTML = `
          <div class="task-header">
            <div class="task-content">
              <input type="checkbox" ${task.completed ? "checked" : ""} onchange="toggleComplete(${index})" />
              <div class="task-text ${task.completed ? "completed" : ""}">${task.text}</div>
            </div>
            <button onclick="removeTask(${index})">‚úñ</button>
          </div>
          <div class="task-meta">
            Added on ${task.date} at ${task.time} | Category: ${task.category}${task.due ? " | Due: " + task.due : ""}
          </div>
        `;
        list.appendChild(li);
      });

      const progress = document.getElementById("progressBar");
      const total = tasks.length;
      const percent = total ? Math.round((completedCount / total) * 100) : 0;
      progress.textContent = `Progress: ${completedCount}/${total} tasks completed (${percent}%)`;
    }

    function removeTask(index) {
      tasks.splice(index, 1);
      saveTasks();
      renderTasks();
    }

    function toggleComplete(index) {
      tasks[index].completed = !tasks[index].completed;
      saveTasks();
      renderTasks();
    }

    function filterTasks() {
      renderTasks();
    }

    function toggleDarkMode() {
      document.body.classList.toggle("dark");
    }

    renderTasks();
  </script>
</body>
</html>
